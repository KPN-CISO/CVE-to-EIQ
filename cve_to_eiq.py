#!/usr/bin/env python3

# (c) 2020 Arnim Eijkhoudt <arnime _squigglything_ kpn-cert.nl>

# This software is GPLv2 licensed, except where otherwise indicated

import argparse
import datetime
import json
import pprint
import socket
import time
import requests
import io
import urllib3
import zipfile

from eiqlib import eiqjson, eiqcalls

import sys # temporary for debugging

from config import settings


def transform(cves, options):
    '''
    Take the CVE JSON object, extract all relevant attributes into a list of reports.
    '''
    if options.verbose:
        print("U) Converting CVE feed into EIQ reports ...")
    try:
        if len(cves) > 0:
            cveList = []
            for entry in cves:
                # Grab the lastModifiedDate. If it is less than 24 hours old,
                # parse the rest of the contents and add it to the CVE list to
                # be pushed into EIQ.
                lastModifiedDate = entry['lastModifiedDate']
                pythondate = datetime.datetime.strptime(lastModifiedDate, "%Y-%m-%dT%H:%MZ")
                now = datetime.datetime.now()
                timedifference = int((now - pythondate).seconds)
                if (timedifference < settings.TIMEWINDOW):
                    # Less than one day old, candidate for EIQ ingestion
                    entity = eiqjson.EIQEntity()
                    entity.set_entity(entity.ENTITY_REPORT)
                    cveid = entry['cve']['CVE_data_meta']['ID']
                    uuid = cveid
                    cvssScore = False
                    references = ''
                    description = ''
                    descriptionList = entry['cve']['description']['description_data']
                    for item in descriptionList:
                        description += item['value'] + '<br />'
                    if entry['impact']:
                        cvssScore = str(entry['impact']['baseMetricV3']['cvssV3']['baseScore'])
                        cvssString = entry['impact']['baseMetricV3']['cvssV3']['vectorString']
                        description += '<br />'
                        description += 'CVSSv3 Score: ' + cvssScore + "<br />"
                        description += 'CVSSv3 String: ' + cvssString + '<br />'
                    referenceList = entry['cve']['references']['reference_data']
                    for item in referenceList:
                        uri = item['url']
                        references += uri + '<br />'
                        entity.add_observable('uri',
                                              uri,
                                              classification=entity.CLASSIFICATION_GOOD,
                                              confidence=entity.CONFIDENCE_HIGH,
                                              link_type=entity.OBSERVABLE_LINK_OBSERVED)
                    if entry['configurations']:
                        nodes = entry['configurations']['nodes']
                        if len(nodes) > 0:
                            description += '<br /><h2>List Of Vulnerable Hardware/Sofware</h2>'
                            description += '<table style="border: 1px solid black;">'
                            description += '<tr><th style="border: 1px solid black; padding: 4px; text-align: left; font-weight: bold;">Manufacturer</th>'
                            description += '<th style="border: 1px solid black; padding: 4px; text-align: left; font-weight: bold;">Item</th>'
                            description += '<th style="border: 1px solid black; padding: 4px; text-align: left; font-weight: bold;">Version</th></tr>'
                            for vulnerable_device in nodes:
                                if 'children' in vulnerable_device:
                                    for child in vulnerable_device['children']:
                                        for item in child['cpe_match']:
                                            if item['vulnerable']:
                                                description += '<tr>'
                                                manufacturer = item['cpe23Uri'].split(':')[3].capitalize()
                                                device = item['cpe23Uri'].split(':')[4].capitalize()
                                                description += '<td style="border: 1px solid black; padding: 4px;">' + manufacturer + '</td>'
                                                description += '<td style="border: 1px solid black; padding: 4px;">' + device + '</td>'
                                                if 'versionEndIncluding' in item:
                                                    version = 'versions through '
                                                    version += item['versionEndIncluding']
                                                elif 'versionEndExcluding' in item:
                                                    version = 'versions before '
                                                    version += item['versionEndExcluding']
                                                else:
                                                    version = 'unknown version(s)'
                                                description += '<td style="border: 1px solid black; padding: 4px;">' + version + '</td></tr>'
                                else:
                                    pass
                                    for item in vulnerable_device['cpe_match']:
                                        if item['vulnerable']:
                                            description += '<tr>'
                                            manufacturer = item['cpe23Uri'].split(':')[3].capitalize()
                                            device = item['cpe23Uri'].split(':')[4].capitalize()
                                            description += '<td style="border: 1px solid black; padding: 4px;">' + manufacturer + '</td>'
                                            description += '<td style="border: 1px solid black; padding: 4px;">' + device + '</td>'
                                            if 'versionEndIncluding' in item:
                                                version = 'versions through '
                                                version += item['versionEndIncluding']
                                            elif 'versionEndExcluding' in item:
                                                version = 'versions before '
                                                version += item['versionEndExcluding']
                                            else:
                                                version = 'unknown version(s)'
                                            description += '<td style="border: 1px solid black; padding: 4px;">' + version + '</td></tr>'
                            description += '</table><br />'
                    entity.set_entity_source_description("CVE to EIQ feed")
                    entity.set_entity_source(settings.EIQSOURCE)
                    if len(description) > 67:
                        title = description[:68] + "..."
                    if cvssScore:
                        entity.set_entity_title(title + ' - ' +
                                                'CVSSv3:' + cvssScore + ' - ' +
                                                cveid + ' - ' + settings.TITLETAG)
                    else:
                        entity.set_entity_title(title + ' - ' +
                                                cveid + ' - ' + settings.TITLETAG)
                    entity.set_entity_tlp('WHITE')
                    entity.set_entity_confidence(entity.CONFIDENCE_MEDIUM)
                    entity.set_entity_reliability('B')
                    entity.set_id(str(uuid))
                    entity.set_entity_observed_time(lastModifiedDate)
                    entity.set_entity_description(description)
                    entity.add_observable('cve',
                                          cveid,
                                          classification=entity.CLASSIFICATION_GOOD,
                                          confidence=entity.CONFIDENCE_HIGH,
                                          link_type=entity.OBSERVABLE_LINK_OBSERVED)
                    cveList.append((entity, uuid))
            if options.verbose:
                print('U) Found ' + str(len(cveList)) +
                      ' candidates for ingestion ...')
            return cveList
        else:
            if options.verbose:
                print("E) An empty result or other error was returned by " +
                      "CVE. Enable verbosity to see the JSON result that " +
                      "was returned.")
    except KeyError:
        print("E) An empty JSON result or other error was returned " +
              "by CVE:")
        print(cves)
        raise


def eiqIngest(eiqJSON, uuid, options):
    '''
    Ingest the provided eiqJSON object into EIQ with the UUID provided
    (or create a new entity if not previously existing)
    '''
    if options.simulate:
        if options.verbose:
            print("U) Not ingesting anything into EIQ because the " +
                  "-s/--simulate flag was set.")
        return False

    if not settings.EIQSSLVERIFY:
        if options.verbose:
            print("W) You have disabled SSL verification for EIQ, " +
                  "this is not recommended.")

    eiqAPI = eiqcalls.EIQApi(insecure=not(settings.EIQSSLVERIFY))
    url = settings.EIQHOST + settings.EIQVERSION
    eiqAPI.set_host(url)
    eiqAPI.set_credentials(settings.EIQUSER, settings.EIQPASS)
    token = eiqAPI.do_auth()
    try:
        if options.verbose:
            print("U) Contacting " + url + ' to ingest ' + uuid + ' ...')
        if not options.duplicate:
            response = eiqAPI.create_entity(eiqJSON, token=token,
                                            update_identifier=uuid)
        else:
            response = eiqAPI.create_entity(eiqJSON, token=token)
    except IOError:
        raise
    if not response or ('errors' in response):
        if response:
            for err in response['errors']:
                print('[error %d] %s' % (err['status'], err['title']))
                print('\t%s' % (err['detail'], ))
        else:
            print('unable to get a response from host')
        return False
    else:
        return response['data']['id']


def download(options):
    '''
    Download the given CVE Event number from CVE
    '''
    if options.verbose:
        print("U) Downloading list of recent CVEs ...")
    try:
        cveurl = settings.CVEURL
        if not settings.CVESSLVERIFY:
            if options.verbose:
                print("W) You have disabled SSL verification for " +
                      "downloading the CVE feed - this is not " +
                      "recommended!")
            urllib3.disable_warnings()
        if options.verbose:
            print("U) Contacting " + cveurl + " ...")
        response = requests.get(cveurl,
                                verify=settings.CVESSLVERIFY).content
        with zipfile.ZipFile(io.BytesIO(response)) as cvezip:
            cvejson = cvezip.read(settings.CVEFILE)
        jsonresponse = json.loads(cvejson.decode('utf-8'))
        cvelist = jsonresponse.get('CVE_Items')
        if options.verbose:
            print("U) Got a CVE response: " + str(len(cvelist)) +
                  " entries.")
        return cvelist
    except IOError:
        if options.verbose:
            print("E) An error occured downloading CVE cves " +
                  " from " +
                  settings.CVEURL)
        raise


def main():
    parser = argparse.ArgumentParser(description='CVE to EIQ converter')
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='store_true',
                        default=False,
                        help='[optional] Enable progress/error info (default: disabled)')
    parser.add_argument('-s', '--simulate',
                        dest='simulate',
                        action='store_true',
                        default=False,
                        help='[optional] Do not actually ingest anything into '
                             'EIQ, just simulate everything. Mostly useful with '
                             'the -v/--verbose flag.')
    parser.add_argument('-n', '--name',
                        dest='name',
                        default=settings.TITLETAG,
                        help='[optional] Override the default TITLETAG name from '
                             'the configuration file (default: TITLETAG in'
                             'settings.py)')
    parser.add_argument('-d', '--duplicate',
                        dest='duplicate',
                        action='store_true',
                        default=False,
                        help='[optional] Do not update the existing EclecticIQ '
                             'entity, but create a new one (default: disabled)')
    args = parser.parse_args()
    cvelist = download(args)
    if cvelist:
        cves = transform(cvelist, args)
        if cves:
            for entity, uuid in cves:
                if args.verbose:
                    pprint.pprint(entity.get_as_json())
                if not args.simulate:
                    eiqIngest(entity.get_as_json(), uuid, args)
        if args.simulate:
            print('U) Not ingesting anything, as simulation mode is set.')


if __name__ == "__main__":
    main()
